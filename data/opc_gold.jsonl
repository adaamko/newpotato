{"sen": "All PackML types will be defined in their own Namespace and will begin with \"PackML\". ", "triplets": [{"rel": "will begin with", "args": ["All PackML types", "\"PackML\""]}, {"rel": "will be defined in", "args": ["All PackML types", "own Namespace"]}]}
{"sen": "A: All ObjectTypes include \"ObjectType\" as part of the name", "triplets": [{"rel": "include", "args": ["All ObjectTypes", "\"ObjectType\""]}]}
{"sen": "B: All Statemachines will end in \"StateMachine\", all States will end in \"state\", All Transitions will end in \"Transition\"", "triplets": [{"rel": "will end in", "args": ["All Statemachines", "\"StateMachine\""]}, {"rel": "will end in", "args": ["All States", "\"state\""]}, {"rel": "will end in", "args": ["All Transitions", "\"Transition\""]}]}
{"sen": "C: All DataTypes that are structures include \"DataType\" as part of the name, this is to be able to differentiate them from any VariableTypes that will just end in Type", "triplets": [{"rel": "include", "args": ["All DataTypes (that are structures)", "\"DataType\""]}]}
{"sen": "D: All Enumerations will end in \"Enum\", to clearly identify that it is an enumeration", "triplets": [{"rel": "will end in", "args": ["All Enumerations", "\"Enum\""]}]}
{"sen": "PackMLObjects shall contain one or more instances of PackMLBaseObjectType.", "triplets": [{"rel": "contain one or more", "args": ["PackMLObjects", "PackMLBaseObjectType"]}]}
{"sen": "RemoteCommand Parameter Values are limited to REAL values.", "triplets": [{"rel": "are limited to", "args": ["RemoteCommand Parameter Values", "REAL"]}]}
{"sen": "The values of ModeCurrentTime roll over to 0 at 2,147,483,647.", "triplets": [{"rel": "roll over to 0 at", "args": ["(values of) ModeCurrentTime", "2,147,483,647"]}]}
{"sen": "The values of ModeCumulativeTime roll over to 0 at 2,147,483,647.", "triplets": [{"rel": "roll over to 0 at", "args": ["ModeCumulativeTime", "2,147,483,647"]}]}
{"sen": "The values of StateCurrentTime roll over to 0 at 2,147,483,647.", "triplets": [{"rel": "roll over to 0 at", "args": ["StateCurrentTime", "2,147,483,647"]}]}
{"sen": "The values of StateComulativeTime roll over to 0 at 2,147,483,647.", "triplets": [{"rel": "roll over to 0 at", "args": ["StateComulativeTime", "2,147,483,647"]}]}
{"sen": "A key point in PackML StateMachines is that all of the StateMachines defined in PackML shall require that the optional AvailableTransitions and AvailableStates component of the FiniteStateMachineType be provided on all instance of the StateMachine.", "triplets": [{"rel": "require", "args": ["StateMachines", "AvailableTransitions"]}, {"rel": "require", "args": ["StateMachines", "AvailableStates"]}]}
{"sen": "The AvailableTransitions and AvailableStates are optional variables in the FiniteStateMachine, but they are overridden in the PackMLBaseStateMachine and are made Mandatory.", "triplets": [{"rel": "are made", "args": ["AvailableTransitions", "Mandatory"]}, {"rel": "are made", "args": ["AvailableStates", "Mandatory"]}]}
{"sen": "The AvailableTransitions and AvailableStates are optional variables in the FiniteStateMachine, but they are overridden in the PackMLMachineStateMachineType and are made Mandatory.", "triplets": [{"rel": "are made", "args": ["AvailableTransitions", "Mandatory"]}, {"rel": "are made", "args": ["AvailableStates", "Mandatory"]}]}
{"sen": "At least one MachineToolType instance shall be present to qualify for any profile of OPC UA for Machine Tools", "triplets": [{"rel": "shall be", "args": ["at least one MachineToolType", "present"]}]}
{"sen": "The ProductionPrograms is made out of at least one instance of ProductionProgramType", "triplets": [{"rel": "made out of at least one", "args": ["ProductionPrograms", "instance of ProductionProgramType"]}]}
{"sen": "The State of ProductionActiveProgramType is inherited from the ProductionProgramType and overridden to be mandatory", "triplets": [{"rel": "overridden to be", "args": ["State of ProductionActiveProgramType", "mandatory"]}]}
{"sen": "PartsPerRun is made out of at least on <Part> instance of ProductionPartType", "triplets": [{"rel": "made out of at least", "args": ["PartsPerRun", "<Part> instance of ProductionPartType"]}]}
{"sen": "The components CurrentState and LastTransition of the ProductionStateMachineType have their optional property Number changed to be mandatory, as defined in Table 36", "triplets": [{"rel": "changed to be", "args": ["CurrentState of the ProductionStateMachineType", "mandatory"]}, {"rel": "changed to be", "args": ["LastTransition of the ProductionStateMachineType", "mandatory"]}]}
{"sen": "The MessagesType Errors have a high Severity between 667 and 1000 and are using an AlertType", "triplets": [{"rel": "have a high Severity", "args": ["MessagesType Errors", "between 667 and 1000"]}, {"rel": "are using", "args": ["MessagesType Errors", "AlertType"]}]}
{"sen": "The MessagesType Warnings have a medium Severity between 334 and 666 and are using an AlertType.", "triplets": [{"rel": "have a medium Severity", "args": ["MessagesType Warnings", "between 334 and 666"]}, {"rel": "are using", "args": ["MessagesType Warnings", "AlertType"]}]}
{"sen": "The MessagesType Messages have a low Severity lower or equal to 333 and are using a NotificationEventType.", "triplets": [{"rel": "have a low Severity", "args": ["MessagesType Messages", "lower or equal to 333"]}, {"rel": "are using", "args": ["MessagesType Messages", "NotificationEventType"]}]}
{"sen": "PartName of PartLoadPrognosisType shall be identical to the Name property of ProductionPartType the instance the prognosis relates to", "triplets": [{"rel": "shall be identical to", "args": ["PartName of PartLoadPrognosisType", "the Name property of ProductionPartType"]}]}
{"sen": "PartIdentifier of PartLoadPrognosisType shall be identical to the Identifier property of the ProductionPartType instance the prognosis relates to.", "triplets": [{"rel": "shall be identical to", "args": ["PartIdentifier of PartLoadPrognosisType", "Identifier property of the ProductionPartType"]}]}
{"sen": "PartName of PartUnloadPrognosisType shall be identical to the Name property of the ProductionPartType instance the prognosis relates to if the part is modelled in the AddressSpace.", "triplets": [{"rel": "shall be identical to", "args": ["PartName of PartUnloadPrognosisType", "Name property of the ProductionPartType"]}]}
{"sen": "The SourceIdentifier Variable of ProductionJobEndPrognosisType Definition shall be identical to the Identifier property belonging to the ProductionJobType the prognosis refers to if modelled in the AddressSpace.", "triplets": [{"rel": "shall be identical to", "args": ["SourceIdentifier Variable of ProductionJobEndPrognosisType", "Identifier property belonging to the ProductionJobType"]}]}
{"sen": "ToolIdentifier of ToolChangePrognosisType is identical to the Identifier property of the tool to change, if applicable.", "triplets": [{"rel": "is identical to", "args": ["ToolIdentifier of ToolChangePrognosisType", "Identifier property of the tool to change"]}]}
{"sen": "ToolNodeId of ToolChangePrognosisType is the NodeId of the BaseToolType subtype instance this prognosis refers to.", "triplets": [{"rel": "refers to", "args": ["ToolNodeId of ToolChangePrognosisType", "NodeId of the BaseToolType"]}]}
{"sen": "The ToolIdentifier of ToolLoadPrognosisType shall be the same as for the Identifier Property of the BaseToolType.", "triplets": [{"rel": "shall be the same as", "args": ["ToolIdentifier of ToolLoadPrognosisType", "Identifier Property of the BaseToolType"]}]}
{"sen": "The ToolIdentifier of ToolLoadPrognosisType and ToolUnloadPrognosisType shall match exactly for the same tool.", "triplets": [{"rel": "shall match exactly", "args": ["ToolIdentifier of ToolLoadPrognosisType and ToolUnloadPrognosisType", "for the same tool"]}]}
{"sen": "The ToolIdentifier of ToolLoadPrognosisType and ToolUnloadPrognosisType shall match exactly for the same tool.", "triplets": [{"rel": "shall match exactly", "args": ["ToolIdentifier of ToolLoadPrognosisType and ToolUnloadPrognosisType", "for the same tool"]}]}
{"sen": "ToolNodeId of ToolUnloadPrognosisType contains the NodeId of the appropriate BaseToolType subtype instance.", "triplets": [{"rel": "contains the", "args": ["ToolNodeId of ToolUnloadPrognosisType", "NodeId of the appropriate BaseToolType subtype instance"]}]}
{"sen": "JobIdentifier of ProductionPartTransitionEventType is a copy of the Identifier property of the ProductionProgramType instance this program belongs to.", "triplets": [{"rel": "is a copy of", "args": ["JobIdentifier of ProductionPartTransitionEventType", "Identifier property of the ProductionProgramType instance"]}]}
{"sen": "1. The MAC address variable of the IPnDeviceType instance should use the canonical format.", "triplets": [{"rel": "should use", "args": ["MAC address variable of the IPnDeviceType", "canonical format"]}]}
{"sen": " The BrowseName of a PnApplicationRelationType instance should be in standard GUID string format", "triplets": [{"rel": "should be", "args": ["BrowseName of a PnApplicationRelationType instance", "Standard GUID string Format"]}]}
{"sen": "The State variable of PnApplicationRelationType has always the value CONNECTED.", "triplets": [{"rel": "has always the value", "args": ["State variable of PnApplicationRelationType", "CONNECTED"]}]}
{"sen": "The BrowseName of a IPnModuleType instance shall be the same as the Slot variable of IPnModuleType in decimal number string format.", "triplets": [{"rel": "shall be the same as", "args": ["BrowseName of a IPnModuleType instance", "Slot variable of IPnModuleType"]}, {"rel": "shall be", "args": ["BrowseName of a IPnModuleType instance", "in decimal number string format"]}]}
{"sen": "The BrowseName of a IPnExpectedModuleType instance shall be the same as the Slot variable of IPnExpectedModuleType in decimal number string format.", "triplets": [{"rel": "shall be the same as", "args": ["BrowseName of a IPnExpectedModuleType instance", "Slot variable of IPnExpectedModuleType"]}, {"rel": "shall be", "args": ["BrowseName of a IPnExpectedModuleType", "in decimal number string format"]}]}
{"sen": "The BrowseName of a IPnRealSubmodule instance shall be the same as the Subslot variable of the IPnRealSubmodule instance in hexadecimal string format.", "triplets": [{"rel": "shall be the same as", "args": ["BrowseName of a IPnRealSubModule instance", "Subslot variable of the IPnRealSubmodule instance"]}, {"rel": "shall be", "args": ["BrowseName of a IPnRealSubmodule", "in hexadecimal string format"]}]}
{"sen": "The BrowseName of a IPnInterfaceType instance shall be the PROFINET interface id with the range 1 to 16 in decimal number string format", "triplets": [{"rel": "shall be", "args": ["BrowseName of a IPnInterfaceType instance", "the PROFINET interface id"]}, {"rel": "shall be", "args": ["BrowseName of a IPnInterfaceType", "in decimal number string format"]}]}
{"sen": "The CommLinkTo reference of an IPnInterfaceType always points to an EthernetInterfaceType object instance.", "triplets": [{"rel": "always points to", "args": ["CommLinkTo reference of an IpnInterfaceType", "EthernetInterfaceType object instance"]}]}
{"sen": "The NetworkComponentType is abstract.", "triplets": [{"rel": "is", "args": ["NetworkComponentType", "abstract"]}]}
{"sen": "The NetworkComponentFeatureType is abstract.", "triplets": [{"rel": "is", "args": ["NetworkComponentFeatureType", "abstract"]}]}
{"sen": "The BrowseName of a PnAssetType instance shall be the same as the UniqueIdentifier variable of a PnAssetType instance in standard GUID string format.", "triplets": [{"rel": "shall be the same as", "args": ["BrowseName of a PnAssetType instance", "UniqueIdentifier variable of a PnAssetType instance"]}, {"rel": "shall be", "args": ["BrowseName of a PnAssetType instance", "in standard GUID string format"]}]}
{"sen": "The HasPnApplicationRelation reference appends nodes of the PnApplicationRelationType to the PnApplicationRelationcontainerType, this reference should always be bidirectional.", "triplets": [{"rel": "appends", "args": ["HasPnApplicationRelation", "nodes of the PnApplicationRelationType to the PnApplicationRelationcontainerType"]}]}
{"sen": "The HasPnRealModule reference type appends nodes of the IPnRealModuleType to the PnRealModuleContainerType node, this reference should always be bidirectional.", "triplets": [{"rel": "appends", "args": ["HasPnRealModule reference", "nodes of the IPnRealModuleType to the PnRealModuleContainerType"]}]}
{"sen": "The HasPnRealSubmodule reference type appends nodes of the IPnSubmoduleType to the PnRealSubmoduleContainerType node, this reference should always be bidirectional.", "triplets": [{"rel": "appends", "args": ["HasPnRealSubmodule reference", "nodes of the IPnSubmoduleType to the PnRealSubmoduleContainerType"]}]}
{"sen": "The HasPnExpectedModule reference appends nodes of the IPnExpectedModuleType to the PnExpectedModuleContainerType node, this reference should always be bidirectional.", "triplets": [{"rel": "appends", "args": ["HasPnExpectedModule reference", "nodes of the IPnExpectedModuleType to the PnExpectedModuleContainerType"]}]}
{"sen": "The HasPnExpectedSubModule reference appends nodes of the IPnExpectedSubmodule to the PnExpectedSubmoduleContainerType node, this reference should always be bidirectional.", "triplets": [{"rel": "appends", "args": ["HasPnExpectedSubModule reference", "nodes of the IPnExpectedSubmodule to the PnExpectedSubmoduleContainerType"]}]}
{"sen": "The HasPnAsset reference appends nodes of the PnAssetType to the PnAssetContainerType node, this reference should always be bidirectional.", "triplets": [{"rel": "appends", "args": ["HasPnAsset reference", "nodes of the PnAssetType to the PnAssetContainerType"]}]}
{"sen": "The HasPnInterface reference appends nodes of the IPnInterfaceType to the PnInterfaceContainerType node, this reference should always be bidirectional.", "triplets": [{"rel": "appends", "args": ["HasPnInterface reference", "nodes of the IPnInterfaceType to the PnInterfaceContainerType"]}]}
{"sen": "The HasPnPort reference appends nodes of the PnPortType to the PnPortContainerType node, this reference should always be bidirectional.", "triplets": [{"rel": "appends", "args": ["HasPnPort reference", "nodes of the PnPortType to the PnPortContainerType"]}]}
{"sen": "The IsPnRealModule reference links the ExpectedModule object to their RealModule counterparts, this reference should always be bidirectional.", "triplets": [{"rel": "links", "args": ["IsPnRealModule reference", "ExpectedModule object to their RealModule counterparts"]}]}
{"sen": "The IsPnRealSubmodule reference links the ExpectedSubmodule objects to their RealSubmodule counterparts, this reference should always be bidirectional", "triplets": [{"rel": "links", "args": ["IsPnRealSubmodule reference", "ExpectedSubmodule objects to their RealSubmodule counterparts"]}]}
{"sen": "The IsPnApplicationRelationDeviceInterface reference links PnApplicationRelationType to the PNInterface of the Device object the application relates to, this reference should always be bidirectional", "triplets": [{"rel": "links", "args": ["IsPnApplicationRelationDeviceInterface", "PnApplicationRelationType to the PNInterface of the Device object the application relates to"]}]}
{"sen": "The IsPnApplicationRelationControllerInterface links the PnApplicationRelationType objects the Pn Interface objec of the IControllerType the application relation relates to, this reference should always be bidirectional.", "triplets": [{"rel": "links", "args": ["IsPnApplicationRelationControllerInterface", "PnApplicationRelationType objects the Pn Interface objec of the IControllerType the application relation relates to"]}]}
{"sen": "The IsPnInterface reference links the RealSubmodule object to the PN Interface of the IpnRealSubmoduleType objects, this reference should always be bidirectional.", "triplets": [{"rel": "links", "args": ["IsPnInterface reference", "RealSubmodule object to the PN Interface of the IpnRealSubmoduleType objects"]}]}
{"sen": "The IsPnPort reference links the Realsubmodule objects of the PnPortType ObjectType, this reference should always be bidirectional.", "triplets": [{"rel": "links", "args": ["IsPnPort reference", "Realsubmodule objects of the PnPortType ObjectType"]}]}
{"sen": "The CommLinkTo reference links network entities, this reference should always be bidirectional.", "triplets": [{"rel": "links", "args": ["CommLinkTo reference", "network entities"]}]}
{"sen": "The MotionDeviceSystemType is the root object represeing the MotionDevice.", "triplets": [{"rel": "is", "args": ["MotionDeviceSystemType", "the root object"]}]}
{"sen": "At least one instance of a MotionDeviceSystemType must be instantiated in the DeviceSet.", "triplets": [{"rel": "must be instantiated", "args": ["MotionDeviceSystemType", "in the DeviceSet"]}]}
{"sen": "A MotionDevice shall have at least one object with the AxisType and atleast one object with the PowerTrainType", "triplets": [{"rel": "shall have at least one", "args": ["MotionDevice", "object with the AxisType"]}, {"rel": "shall have at least one", "args": ["MotionDevice", "object with the PowerTrainType"]}]}
{"sen": "The AssetId property of the MotionDeviceType is unique.", "triplets": [{"rel": "is", "args": ["AssetId property of the MotionDeviceType", "unique"]}]}
{"sen": "The AssetId property of the AxisType is unique.", "triplets": [{"rel": "is", "args": ["AssetId property of the AxisType", "unique"]}]}
{"sen": "The SerialNumber property of the MotorType is unique.", "triplets": [{"rel": "is", "args": ["SerialNumber property of the MotorType", "unique"]}]}
{"sen": "The ProductCode property of the MotorType is unique.", "triplets": [{"rel": "is", "args": ["ProductCode property of the MotorType", "unique"]}]}
{"sen": "The AssetId property of the MotorType is unique.", "triplets": [{"rel": "is", "args": ["AssetId property of the MotorType", "unique"]}]}
{"sen": "The SerialNumber property of the GearType is unique.", "triplets": [{"rel": "is", "args": ["SerialNumber property of the GearType", "unique"]}]}
{"sen": "The ProductCode property of the GearType is unique.", "triplets": [{"rel": "is", "args": ["ProductCode property of the GearType", "unique"]}]}
{"sen": "The AssetId property of the GearType is unique.", "triplets": [{"rel": "is", "args": ["AssetId property of the GearType", "unique"]}]}
{"sen": "The SerialNumber property of the ControllerType is unique.", "triplets": [{"rel": "is", "args": ["SerialNumber property of the ControllerType", "unique"]}]}
{"sen": "The AssetId property of the ControllerType is unique.", "triplets": [{"rel": "is", "args": ["AssetId property of the ControllerType", "unique"]}]}
{"sen": "The ProductCode Property of the AuxiliaryComponentType is unique.", "triplets": [{"rel": "is", "args": ["ProductCode Property of the AuxiliaryComponentType", "unique"]}]}
{"sen": "The AssetId property of the AuxiliaryComponentType is unique.", "triplets": [{"rel": "is", "args": ["AssetId property of the AuxiliaryComponentType", "unique"]}]}
{"sen": "The ProductCode property of the DriveType is unique.", "triplets": [{"rel": "is", "args": ["ProductCode property of the DriveType", "unique"]}]}
{"sen": "The AssetId property of the DriveType is unique.", "triplets": [{"rel": "is", "args": ["AssetId property of the DriveType", "unique"]}]}
{"sen": "WSAnalogUnitType are either the DataType Float or UInt32.", "triplets": [{"rel": "are", "args": ["WSAnalogUnitType", "DataType Float"]}, {"rel": "are", "args": ["WSAnalogUnitType", "DataType UInt32"]}]}
